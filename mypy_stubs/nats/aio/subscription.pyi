from nats.errors import *
from nats.aio.errors import *
import asyncio
from nats.aio.msg import Msg as Msg
from typing import Any, AsyncIterator, Callable, Optional

DEFAULT_SUB_PENDING_MSGS_LIMIT: Any
DEFAULT_SUB_PENDING_BYTES_LIMIT: Any

class Subscription:
    def __init__(self, conn, id: int = ..., subject: str = ..., queue: str = ..., cb: Optional[Callable[[Msg], None]] = ..., future: Optional[asyncio.Future] = ..., max_msgs: int = ..., pending_msgs_limit: int = ..., pending_bytes_limit: int = ...) -> None: ...
    @property
    def subject(self) -> str: ...
    @property
    def queue(self) -> str: ...
    @property
    def messages(self) -> AsyncIterator['Msg']: ...
    @property
    def pending_msgs(self) -> int: ...
    @property
    def delivered(self) -> int: ...
    async def next_msg(self, timeout: float = ...) -> Msg: ...
    async def drain(self) -> None: ...
    async def unsubscribe(self, limit: int = ...): ...

class _SubscriptionMessageIterator:
    def __init__(self, queue) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...
