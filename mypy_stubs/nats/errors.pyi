import asyncio
from nats.aio.subscription import Subscription as Subscription
from typing import Any

class Error(Exception): ...
class TimeoutError(asyncio.TimeoutError): ...
class NoRespondersError(Error): ...
class StaleConnectionError(Error): ...
class ConnectionClosedError(Error): ...
class SecureConnRequiredError(Error): ...
class SecureConnWantedError(Error): ...
class SecureConnFailedError(Error): ...
class BadSubscriptionError(Error): ...
class BadSubjectError(Error): ...

class SlowConsumerError(Error):
    subject: Any
    reply: Any
    sid: Any
    sub: Any
    def __init__(self, subject: str, reply: str, sid: int, sub: Subscription) -> None: ...

class BadTimeoutError(Error): ...
class AuthorizationError(Error): ...
class NoServersError(Error): ...
class JsonParseError(Error): ...
class MaxPayloadError(Error): ...
class DrainTimeoutError(TimeoutError): ...
class ConnectionDrainingError(Error): ...
class ConnectionReconnectingError(Error): ...
class InvalidUserCredentialsError(Error): ...
class InvalidCallbackTypeError(Error): ...
class ProtocolError(Error): ...
class NotJSMessageError(Error): ...

class MsgAlreadyAckdError(Error):
    def __init__(self, msg: Any | None = ...) -> None: ...
