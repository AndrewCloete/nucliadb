import abc
from abc import ABC, abstractmethod
from nats.js import api as api
from nats.js.errors import BadBucketError as BadBucketError, BucketNotFoundError as BucketNotFoundError, KeyDeletedError as KeyDeletedError, NotFoundError as NotFoundError
from nats.js.headers import KV_EXPECTED_HDR as KV_EXPECTED_HDR, MSG_ROLLUP_HDR as MSG_ROLLUP_HDR
from typing import Optional

KV_OP: str
KV_DEL: str
KV_PURGE: str
MSG_ROLLUP_SUBJECT: str
MSG_ROLLUP_ALL: str

class KeyValue:
    class Entry:
        bucket: str
        key: str
        value: Optional[bytes]
        revision: int
        def __init__(self, bucket, key, value, revision) -> None: ...
    class BucketStatus:
        def __init__(self) -> None: ...
        @property
        def bucket(self): ...
        @property
        def values(self): ...
        @property
        def history(self): ...
        @property
        def ttl(self): ...
        @property
        def stream_info(self): ...
    def __init__(self, name, stream, pre, js) -> None: ...
    async def get(self, key: str) -> Entry: ...
    async def put(self, key: str, value: bytes) -> int: ...
    async def update(self, key: str, value: bytes, last: int) -> int: ...
    async def delete(self, key: str) -> bool: ...
    async def purge(self, key: str) -> bool: ...
    async def status(self) -> BucketStatus: ...

class KeyValueManager(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    async def stream_info(self, name: str): ...
    @abstractmethod
    async def add_stream(self, config: api.StreamConfig): ...
    @abstractmethod
    async def delete_stream(self, name: str): ...
    async def key_value(self, bucket: str): ...
    async def create_key_value(self, **params) -> KeyValue: ...
    async def delete_key_value(self, bucket: str): ...
