import abc
from abc import ABC, abstractmethod
from opentelemetry._metrics.instrument import Counter as Counter, Histogram as Histogram, ObservableCounter as ObservableCounter, ObservableGauge as ObservableGauge, ObservableUpDownCounter as ObservableUpDownCounter, UpDownCounter as UpDownCounter
from typing import Any, Optional

class MeterProvider(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def get_meter(self, name, version: Any | None = ..., schema_url: Any | None = ...) -> Meter: ...

class _DefaultMeterProvider(MeterProvider):
    def get_meter(self, name, version: Any | None = ..., schema_url: Any | None = ...) -> Meter: ...

class _ProxyMeterProvider(MeterProvider):
    def __init__(self) -> None: ...
    def get_meter(self, name, version: Any | None = ..., schema_url: Any | None = ...) -> Meter: ...
    def on_set_meter_provider(self, meter_provider: MeterProvider) -> None: ...

class Meter(ABC, metaclass=abc.ABCMeta):
    def __init__(self, name, version: Any | None = ..., schema_url: Any | None = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def version(self): ...
    @property
    def schema_url(self): ...
    @abstractmethod
    def create_counter(self, name, unit: str = ..., description: str = ...) -> Counter: ...
    @abstractmethod
    def create_up_down_counter(self, name, unit: str = ..., description: str = ...) -> UpDownCounter: ...
    @abstractmethod
    def create_observable_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableCounter: ...
    @abstractmethod
    def create_histogram(self, name, unit: str = ..., description: str = ...) -> Histogram: ...
    @abstractmethod
    def create_observable_gauge(self, name, callback, unit: str = ..., description: str = ...) -> ObservableGauge: ...
    @abstractmethod
    def create_observable_up_down_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableUpDownCounter: ...

class _ProxyMeter(Meter):
    def __init__(self, name, version: Any | None = ..., schema_url: Any | None = ...) -> None: ...
    def on_set_meter_provider(self, meter_provider: MeterProvider) -> None: ...
    def create_counter(self, name, unit: str = ..., description: str = ...) -> Counter: ...
    def create_up_down_counter(self, name, unit: str = ..., description: str = ...) -> UpDownCounter: ...
    def create_observable_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableCounter: ...
    def create_histogram(self, name, unit: str = ..., description: str = ...) -> Histogram: ...
    def create_observable_gauge(self, name, callback, unit: str = ..., description: str = ...) -> ObservableGauge: ...
    def create_observable_up_down_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableUpDownCounter: ...

class _DefaultMeter(Meter):
    def create_counter(self, name, unit: str = ..., description: str = ...) -> Counter: ...
    def create_up_down_counter(self, name, unit: str = ..., description: str = ...) -> UpDownCounter: ...
    def create_observable_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableCounter: ...
    def create_histogram(self, name, unit: str = ..., description: str = ...) -> Histogram: ...
    def create_observable_gauge(self, name, callback, unit: str = ..., description: str = ...) -> ObservableGauge: ...
    def create_observable_up_down_counter(self, name, callback, unit: str = ..., description: str = ...) -> ObservableUpDownCounter: ...

def get_meter(name: str, version: str = ..., meter_provider: Optional[MeterProvider] = ...) -> Meter: ...
def set_meter_provider(meter_provider: MeterProvider) -> None: ...
def get_meter_provider() -> MeterProvider: ...
