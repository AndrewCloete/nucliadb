import abc
from abc import ABC, abstractmethod
from opentelemetry import _metrics as metrics
from opentelemetry._metrics.measurement import Measurement
from typing import Any, Callable, Generator, Iterable, TypeVar, Union

InstrumentT = TypeVar('InstrumentT', bound='Instrument')
CallbackT = Union[Callable[[], Iterable[Measurement]], Generator[Iterable[Measurement], None, None]]

class Instrument(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, name, unit: str = ..., description: str = ...): ...

class _ProxyInstrument(ABC, metaclass=abc.ABCMeta):
    def __init__(self, name, unit, description) -> None: ...
    def on_meter_set(self, meter: metrics.Meter) -> None: ...

class _ProxyAsynchronousInstrument(_ProxyInstrument[InstrumentT], metaclass=abc.ABCMeta):
    def __init__(self, name, callback, unit, description) -> None: ...

class Synchronous(Instrument, metaclass=abc.ABCMeta): ...

class Asynchronous(Instrument, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, name, callback, unit: str = ..., description: str = ...): ...

class _Adding(Instrument, metaclass=abc.ABCMeta): ...
class _Grouping(Instrument, metaclass=abc.ABCMeta): ...
class _Monotonic(_Adding, metaclass=abc.ABCMeta): ...
class _NonMonotonic(_Adding, metaclass=abc.ABCMeta): ...

class Counter(_Monotonic, Synchronous, metaclass=abc.ABCMeta):
    @abstractmethod
    def add(self, amount, attributes: Any | None = ...): ...

class DefaultCounter(Counter):
    def __init__(self, name, unit: str = ..., description: str = ...) -> None: ...
    def add(self, amount, attributes: Any | None = ...): ...

class _ProxyCounter(_ProxyInstrument[Counter], Counter):
    def add(self, amount, attributes: Any | None = ...) -> None: ...

class UpDownCounter(_NonMonotonic, Synchronous, metaclass=abc.ABCMeta):
    @abstractmethod
    def add(self, amount, attributes: Any | None = ...): ...

class DefaultUpDownCounter(UpDownCounter):
    def __init__(self, name, unit: str = ..., description: str = ...) -> None: ...
    def add(self, amount, attributes: Any | None = ...): ...

class _ProxyUpDownCounter(_ProxyInstrument[UpDownCounter], UpDownCounter):
    def add(self, amount, attributes: Any | None = ...) -> None: ...

class ObservableCounter(_Monotonic, Asynchronous, metaclass=abc.ABCMeta): ...

class DefaultObservableCounter(ObservableCounter):
    def __init__(self, name, callback, unit: str = ..., description: str = ...) -> None: ...

class _ProxyObservableCounter(_ProxyAsynchronousInstrument[ObservableCounter], ObservableCounter): ...
class ObservableUpDownCounter(_NonMonotonic, Asynchronous, metaclass=abc.ABCMeta): ...

class DefaultObservableUpDownCounter(ObservableUpDownCounter):
    def __init__(self, name, callback, unit: str = ..., description: str = ...) -> None: ...

class _ProxyObservableUpDownCounter(_ProxyAsynchronousInstrument[ObservableUpDownCounter], ObservableUpDownCounter): ...

class Histogram(_Grouping, Synchronous, metaclass=abc.ABCMeta):
    @abstractmethod
    def record(self, amount, attributes: Any | None = ...): ...

class DefaultHistogram(Histogram):
    def __init__(self, name, unit: str = ..., description: str = ...) -> None: ...
    def record(self, amount, attributes: Any | None = ...): ...

class _ProxyHistogram(_ProxyInstrument[Histogram], Histogram):
    def record(self, amount, attributes: Any | None = ...) -> None: ...

class ObservableGauge(_Grouping, Asynchronous, metaclass=abc.ABCMeta): ...

class DefaultObservableGauge(ObservableGauge):
    def __init__(self, name, callback, unit: str = ..., description: str = ...) -> None: ...

class _ProxyObservableGauge(_ProxyAsynchronousInstrument[ObservableGauge], ObservableGauge): ...
